package com.isaacbcdev.spring.boot.datajpa;

import com.isaacbcdev.spring.boot.datajpa.entities.Person;
import com.isaacbcdev.spring.boot.datajpa.repositories.PersonRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.Scanner;

@SpringBootApplication
@RequiredArgsConstructor
public class DataJpaApplication implements CommandLineRunner {

    private final PersonRepository personRepository;

    public static void main(String[] args) {
        SpringApplication.run(DataJpaApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {

        create();
    }

    @Transactional // Is used to manage transactions, ensuring that the operations are atomic
    public void create() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the name of the person:");
        String name = sc.nextLine();

        System.out.println("Enter the last name of the person:");
        String lastName = sc.nextLine();

        System.out.println("Enter the programming language of the person:");
        String programmingLanguage = sc.nextLine();

        Person person = new Person(null, name, lastName, programmingLanguage); // ID is null because it will be generated by the database
        Person newPerson = personRepository.save(person);
        System.out.println("New person created: " + newPerson);

        personRepository.findById(newPerson.getId()).ifPresent(System.out::println);
    }

    @Transactional
    public void update() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the ID of the person to update:");
        Long id = sc.nextLong();
        sc.nextLine(); // Consume the newline character

        Optional<Person> person = personRepository.findById(id);
//        person.ifPresent(person1 -> {
//            System.out.println(person1);
//            System.out.println("Current programming language: " + person1.getProgrammingLanguage());
//            System.out.println("Enter the new programming language:");
//            String newProgrammingLanguage = sc.nextLine();
//            person1.setProgrammingLanguage(newProgrammingLanguage);
//
//            personRepository.save(person1);
//            System.out.println("Person updated: " + person1);
//        });

        if (person.isPresent()) {
            Person person1 = person.orElseThrow();
            System.out.println(person1);
            System.out.println("Current programming language: " + person1.getProgrammingLanguage());
            System.out.println("Enter the new programming language:");
            String newProgrammingLanguage = sc.nextLine();
            person1.setProgrammingLanguage(newProgrammingLanguage);

            personRepository.save(person1);
            System.out.println("Person updated: " + person1);
        } else {
            System.out.println("Person with ID " + id + " not found.");
        }

        sc.close();
    }

    @Transactional
    public void delete() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the ID of the person to delete:");
        Long id = sc.nextLong();
        list();
        personRepository.deleteById(id);
        list();

        sc.close();
    }

    @Transactional
    public void delete2() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the ID of the person to delete:");
        Long id = sc.nextLong();
        list();
        System.out.println("------------------");

        Optional<Person> optionalPerson = personRepository.findById(id);
        optionalPerson.ifPresentOrElse(personRepository::delete,
            () -> System.out.println("Person with ID " + id + " not found.")
        );

        System.out.println("------------------");
        list();

        sc.close();
    }

    @Transactional(readOnly = true)
    // If the method is read-only, it can optimize performance by not locking the database
    public void findOne() {
//        Person person = null;
//        Optional<Person> optionalPerson = personRepository.findOne(1L);
//        if (!optionalPerson.isEmpty()) {
//        if (optionalPerson.isPresent()) {
//            person = optionalPerson.get();
//        }
//        System.out.println("person = " + person);
        personRepository.findByNameContaining("Isa").ifPresent(System.out::println);
    }

    @Transactional(readOnly = true)
    public void list() {
        List<Person> persons = (List<Person>) personRepository.findAll();
//        List<Object[]> persons = personRepository.findNameAndProgrammingLanguageData("Java");
        persons.forEach(person -> {
            System.out.println("With ID:" + person.getId() + ", " + person.getName() + " " +person.getLastname() + " is an expert in: " + person.getProgrammingLanguage());
        });
    }
}